#!/bin/bash
# ---------------------------------------------------
#  XMP tags common functions
#
#  Revision history :
#   20/08/2016, V1.0 - Creation by N. Bernaerts
#   28/08/2016, V1.1 - Add tags update functions
# ---------------------------------------------------

# -------------------------------------------------------
#  Extract all EXIF tags from image file
#    $1 - File where to place full extraction
#    $2 - Image file
# -------------------------------------------------------
function tags-extract-all ()
{
  # get parameters
  FILE_TAG="$1"
  FILE_IMAGE="$2"

  # temporary file
  FILE_TMP=$(mktemp --tmpdir "XXXXXXXX.tag")

  # read EXIF data
  exiftool -G -s -args "${FILE_IMAGE}" > "${FILE_TMP}"

  # detect encoding
  ENCODING=$(file -i "${FILE_TMP}" | cut -d"=" -f2)

  # convert dump to UTF8
  iconv -f "${ENCODING}" -t "UTF-8" "${FILE_TMP}" -o "${FILE_TAG}"

  # clean temporary file
  rm "${FILE_TMP}"
}

# -------------------------------------------------------
#  Write all EXIF tags of specific type to image file
#    $1 - File with all the tags
#    $2 - Image file
#    $3 - Family of tag to write (EXIF, XMP, ...)
# -------------------------------------------------------
function tags-save-family ()
{
  # get parameters
  FILE_TAG="$1"
  FILE_IMAGE="$2"
  TYPE_TAG="$3"

  # cleanup MakerNotes and all tags of given type
  exiftool -overwrite_original "-${TYPE_TAG}=" "-MakerNotes=" "${FILE_IMAGE}"

  # loop thru tags file to write them
  ARR_TAGS=()
  while read LINE
  do
    # extract tag data
    CURRENT_TYPE=$(echo "${LINE}" | cut -d '-' -f2 | cut -d':' -f1)
    CURRENT_NAME=$(echo "${LINE}" | cut -d ':' -f2 | cut -d'=' -f1)
    CURRENT_VALUE=$(echo "${LINE}" | cut -d '=' -f2-)

    # if tag type is ok, add the tag to the array
    [ "${CURRENT_TYPE}" = "${TYPE_TAG}" ] && ARR_TAGS=("${ARR_TAGS[@]}" "-${CURRENT_TYPE}:${CURRENT_NAME}=${CURRENT_VALUE}")
  done < "${FILE_TAG}"

  # declare tags of given type
  exiftool -overwrite_original -m "${ARR_TAGS[@]}" "${FILE_IMAGE}"
}

# -------------------------------------------------------
#  Read specified tag from the tag file list
#    $1 - File with all the tags
#    $2 - Type of tag to read (EXIF, XMP, ...)
#    $3 - Name of tag
# -------------------------------------------------------
function tags-read-tag ()
{
  # get parameters
  FILE_TAG="$1"
  TYPE_TAG="$2"
  NAME_TAG="$3"

  # build the search pattern
  PATTERN="-${TYPE_TAG}:${NAME_TAG}="

  # remove tag from list if exists
  VALUE_TAG=$(grep "^${PATTERN}" "${FILE_TAG}" | cut -d '=' -f2-) 

  # display value
  echo "${VALUE_TAG}"
}

# -------------------------------------------------------
#  Write specified tag to the tag file list
#    $1 - File with all the tags
#    $2 - Type of tag to write (EXIF, XMP, ...)
#    $3 - Name of tag
#    $4 - Value of tag
# -------------------------------------------------------
function tags-write-tag ()
{
  # get parameters
  FILE_TAG="$1"
  TYPE_TAG="$2"
  NAME_TAG="$3"
  VALUE_TAG="$4"

  # temporary file
  FILE_TMP=$(mktemp --tmpdir "XXXXXXXX.tag")

  # build the search pattern
  PATTERN="-${TYPE_TAG}:${NAME_TAG}="

  # remove tag from list if exists
  sed -n '/'${PATTERN}'/!p' "${FILE_TAG}" > "${FILE_TMP}"

  # add tag to the list
  echo "-${TYPE_TAG}:${NAME_TAG}=${VALUE_TAG}" >> "${FILE_TMP}"

  # replace original tag list
  mv "${FILE_TMP}" "${FILE_TAG}"
}

# -------------------------------------------------------
#  Get and Set EXIF tags for Creation Date
#    $1 - File with all tags
#    $2 - date (YYYY:MM:DD HH:MM:SS)
# -------------------------------------------------------
function tags-get-date ()
{
  # read tag
  TAG_VALUE=$(tags-read-tag "$1" "XMP" "DateTime" | grep ":")
  [ "${TAG_VALUE}" = "" ] && TAG_VALUE=$(tags-read-tag "$1" "EXIF" "CreateDate" | grep ":")
  [ "${TAG_VALUE}" = "" ] && TAG_VALUE=$(tags-read-tag "$1" "EXIF" "DateTimeOriginal" | grep ":")
  [ "${TAG_VALUE}" = "" ] && TAG_VALUE=$(tags-read-tag "$1" "IPTC" "DateCreated" | grep ":")
  [ "${TAG_VALUE}" = "" ] && TAG_VALUE=$(tags-read-tag "$1" "PDF" "CreateDate" | grep ":")
  [ "${TAG_VALUE}" = "" ] && TAG_VALUE=$(tags-read-tag "$1" "Composite" "GPSDateTime" | grep ":")

  # keep only YYYY:MM:DD HH:MM:SS
  TAG_VALUE=$(echo "${TAG_VALUE}" | sed "s/^\([0-9 :]*\).*$/\1/")

  # return result
  echo "${TAG_VALUE}"
}

function tags-set-date ()
{
  # update tags
  tags-write-tag "$1" "EXIF" "CreateDate" "$2"
  tags-write-tag "$1" "EXIF" "DateTimeOriginal" "$2"
  tags-write-tag "$1" "XMP" "DateTime" "$2"
  tags-write-tag "$1" "XMP" "DateTimeDigitized" "$2"
}

# -------------------------------------------------------
#  Get and Set EXIF tags for Title
#    $1 - File with all tags
#    $2 - Title
# -------------------------------------------------------
function tags-get-title ()
{
  # read tag
  TAG_VALUE=$(tags-read-tag "$1" "XMP" "Caption")
  [ "${TAG_VALUE}" = "" ] && TAG_VALUE=$(tags-read-tag "$1" "EXIF" "DocumentName")
  [ "${TAG_VALUE}" = "" ] && TAG_VALUE=$(tags-read-tag "$1" "IPTC" "ObjectName")
  [ "${TAG_VALUE}" = "" ] && TAG_VALUE=$(tags-read-tag "$1" "PDF" "Title")

  # return result
  echo "${TAG_VALUE}"
}

function tags-set-title ()
{
  # update tags
  tags-write-tag "$1" "EXIF" "DocumentName" "$2"
  tags-write-tag "$1" "XMP" "Caption" "$2"
}

# -------------------------------------------------------
#  Get and Set EXIF tags for Caption
#    $1 - File with all tags
#    $2 - Caption
# -------------------------------------------------------
function tags-get-caption ()
{
  # read tag
  TAG_VALUE=$(tags-read-tag "$1" "XMP" "Notes")
  [ "${TAG_VALUE}" = "" ] && TAG_VALUE=$(tags-read-tag "$1" "EXIF" "ImageDescription")
  [ "${TAG_VALUE}" = "" ] && TAG_VALUE=$(tags-read-tag "$1" "IPTC" "Caption-Abstract")
  [ "${TAG_VALUE}" = "" ] && TAG_VALUE=$(tags-read-tag "$1" "PDF" "Notes")

  # return result
  echo "${TAG_VALUE}"
}

function tags-set-caption ()
{
  # update tags
  tags-write-tag "$1" "EXIF" "ImageDescription" "$2"
  tags-write-tag "$1" "XMP" "Notes" "$2"
}

# -------------------------------------------------------
#  Get and Set EXIF tags for City 
#    $1 - File with all tags
#    $2 - City
# -------------------------------------------------------
function tags-get-city ()
{
  # read tag
  TAG_VALUE=$(tags-read-tag "$1" "XMP" "City")
  [ "${TAG_VALUE}" = "" ] && TAG_VALUE=$(tags-read-tag "$1" "IPTC" "City")
  [ "${TAG_VALUE}" = "" ] && TAG_VALUE=$(tags-read-tag "$1" "PDF" "City")

  # return result
  echo "${TAG_VALUE}"
}

function tags-set-city ()
{
  # update tags
  tags-write-tag "$1" "XMP" "City" "$2"
}

# -------------------------------------------------------
#  Get and Set EXIF tags for Country 
#    $1 - File with all tags
#    $2 - Country
# -------------------------------------------------------
function tags-get-country ()
{
  # read tagCountry
  TAG_VALUE=$(tags-read-tag "$1" "XMP" "Country")
  [ "${TAG_VALUE}" = "" ] && TAG_VALUE=$(tags-read-tag "$1" "IPTC" "Country-PrimaryLocationName")
  [ "${TAG_VALUE}" = "" ] && TAG_VALUE=$(tags-read-tag "$1" "PDF" "Country")

  # return result
  echo "${TAG_VALUE}"
}

function tags-set-country ()
{
  # update tags
  tags-write-tag "$1" "XMP" "Country" "$2"
}

# -------------------------------------------------------
#  Get and Set EXIF tags for Author 
#    $1 - File with all tags
#    $2 - Author
# -------------------------------------------------------
function tags-get-author ()
{
  # read tag
  TAG_VALUE=$(tags-read-tag "$1" "XMP" "Author")

  # return result
  echo "${TAG_VALUE}"
}

function tags-set-author ()
{
  # update tag
  tags-write-tag "$1" "XMP" "Author" "$2"
}

# -------------------------------------------------------
#  Get and Set EXIF tags for Keywords 
#    $1 - File with all tags
#    $2 - Keywords
# -------------------------------------------------------
function tags-get-keywords ()
{
  # read tag
  TAG_VALUE=$(tags-read-tag "$1" "XMP" "Keywords")
  [ "${TAG_VALUE}" = "" ] && TAG_VALUE=$(tags-read-tag "$1" "IPTC" "Keywords")

  # return result
  echo "${TAG_VALUE}"
}

function tags-set-keywords ()
{
  # update tag
  tags-write-tag "$1" "XMP" "Keywords" "$2"
}

# -------------------------------------------------------
#  Get and Set Thumbnail in EXIF tags
#    $1 - original image file
#    $2 - file where to place thumbnail
# -------------------------------------------------------
function tags-get-thumbnail ()
{
  # try to extract thumbnail from EXIF tags
  exiftool -b -ThumbnailImage "$1" > "$2"

  # if failed, generate thumbnail from image (without any metadata)
  [ ! -s "$2" ] && convert -strip -define jpeg:size=128x128 -auto-orient "$1[0]" -resize "128x" -quality 85 "$2"
}

function tags-add-thumbnail ()
{
  # temporary file
  THUMB_TMP=$(mktemp --tmpdir "XXXXXXXX.jpg")
  rm ${THUMB_TMP}

  # generate thumbnail from image
  convert -strip -define jpeg:size=240x240 -auto-orient "$1[0]" -resize "240x" -quality 80 ${THUMB_TMP}

  # add thumbnail to the image file
  exiftool -overwrite_original '-ThumbnailImage<='${THUMB_TMP} "$1"

  # clean temporary file
  rm "${THUMB_TMP}"
}
