#!/bin/bash
# -------------------------------------------------------
#  Video Stabilizer based on MLT and vid.stab
#  For installation instructions, please check
#  http://bernaerts.dyndns.org/linux/74-ubuntu/329-ubuntu-trusty-rotate-stabilize-video-melt-vidstab
#  
#  Depends on :
#    * melt (from ppa:sunab/kdenlive-release)
#    * vidstab (libvidstab1.0 package from ppa:sunab/kdenlive-release)
#    * yad (from ppa:webupd8team/y-ppa-manager)
#    * exiftool (from libimage-exiftool-perl package)
#    * avconv
#    * x264
#  Revision history :
#    04/03/2012, V1.0 - Creation by N. Bernaerts
#    04/04/2012, V1.1 - Add codecs as parameters
#    17/01/2015, V2.0 - Completle rewrite for Ubuntu 14.04 LTS 
#                       Handle rotation as well thanks to Guy Eagling
#    19/01/2015, V2.1 - Manage per process .trf file to allow parallel execution
#    19/01/2015, V2.2 - Add .pid file to handle processing cancellation
#    23/01/2015, V3.0 - Check tools availability, 
#                       detect available stabilization filters (vidstab, videostab2 or videostab)
#                       and add Fedora compatibility (mlt-melt) thanks to Guy Eagling
# -------------------------------------------------------

# -------------------------------------------------------
#  Beginning of parameter section
#
#  (Please, do not modify anything out of this section)
#

# list of input video extensions
ARR_EXT=("3gp" "avi" "dv" "m4v" "mkv" "mov" "movie" "mp4" "mpeg" "mpg" "qt")

# Default stabilization parameters
STAB_SHAKINESS="4"
STAB_SMOOTHING="15"
STAB_OPTZOOM="1"
STAB_EXTRA=("show=0" "crop=0")

# Default encoder options (rate in kbits/s)
VIDEO_CODEC="libx264"
AUDIO_CODEC="aac"
VIDEO_RATE=20000
AUDIO_RATE=128
ENCODE_OPTION=("tune=film" "preset=slow")

#
#  End of parameter section
# -------------------------------------------------------

# -------------------------------------------------------
#  Check tools availability
# -------------------------------------------------------

# check melt (ubuntu) or mlt-melt (fedora)
CMD_MELT="melt"
command -v $CMD_MELT >/dev/null 2>&1 || { CMD_MELT="mlt-melt"; }
command -v $CMD_MELT >/dev/null 2>&1 || { zenity --error --text="Please install Melt from MLT framework"; exit 1; }

# check yad, exiftool and x264
command -v yad >/dev/null 2>&1 || { zenity --error --text="Please install Yad"; exit 1; }
command -v exiftool >/dev/null 2>&1 || { zenity --error --text="Please install ExifTool"; exit 1; }
command -v x264 >/dev/null 2>&1 || { zenity --error --text="Please install x264"; exit 1; }

# -------------------------------------------------------
#  Retrieve or select video file
# -------------------------------------------------------

# get file name and extension
FILE_PATH="$1"
FILE_EXT=$(echo "${FILE_PATH}" | sed 's/^.*\.\(.*\)$/\1/')

# check if file extension given in parameter is in the list
[ -f "$FILE_PATH" ] && EXT_OK=$(echo "${ARR_EXT[@]}" | grep --ignore-case $FILE_EXT)

# if no file or file not video file, open file selection dialog box
LIST_EXT=$(echo "*.${ARR_EXT[@]}" | sed 's/ / *\./g')
[ -z "$EXT_OK" ] && FILE_PATH=$(yad --center --width=800 --height=500 --window-icon "video" --image "stabilizer" \
                                    --file --file-filter="Video file (${LIST_EXT[@]})|${LIST_EXT[@]}" \
                                    --title="Select video file to stabilize")

# -------------------------------------------------------
#  Analyse video file and select processing parameters
# -------------------------------------------------------

# if file selected, lets continue
if [ -f "${FILE_PATH}" ];
then
  # generate the filenames
  FILE_BASE="$(echo "${FILE_PATH}" | sed 's/^\(.*\)\..*$/\1/')"
  FILE_MLT="${FILE_BASE}.mlt"
  FILE_LOG="${FILE_BASE}.log"
  FILE_STAB="${FILE_BASE}-stab.mp4"

  # generate temporary files
  FILE_TMP=$(mktemp -t XXXXXXXX) && rm "${FILE_TMP}"
  FILE_TRF="${FILE_TMP}.trf"
  FILE_PID="${FILE_TMP}.pid"

  # get video metadata
  ARR_EXIF=$(exiftool -s3 -rotation -imagewidth -imageheight -avgbitrate "${FILE_PATH}")
  FILE_ROTATE=$(echo $ARR_EXIF | awk '{print $1}')
  FILE_WIDTH=$(echo $ARR_EXIF | awk '{print $2}')
  FILE_HEIGHT=$(echo $ARR_EXIF | awk '{print $3}')
  FILE_BITRATE=$(echo $ARR_EXIF | awk '{print $4 $5}')

  # get encoding parameters using local number decimal separator (, or .)
  SEPARATOR=$(printf "%'.2f" 1 | sed 's/^1\(.\).*$/\1/')
  VIDEO_RATIO=$(echo "scale=2; ${FILE_WIDTH} / ${FILE_HEIGHT}" | bc | sed 's/[\.\,]/'${SEPARATOR}'/g')

  # detect if rotation needed
  [ "$FILE_ROTATE" = "0" ] && CHECK_ROTATE="FALSE" || CHECK_ROTATE="TRUE"

  # set title and text of dialog box
  TITLE="${FILE_PATH}"
  TEXT="Select transformation parameters :\n ( size = ${FILE_WIDTH}x${FILE_HEIGHT}, rate = ${FILE_BITRATE} )\n"

  # get list of stabilization filters available from current melt version
  ARR_FILTER=$(${CMD_MELT} -query filters | grep stab | awk '{print $2}' | sort -r)
  LST_FILTER=$(echo ${ARR_FILTER} | sed 's/ /|/g')

  # display dialog box
  CHOICE=$(yad --title "${TITLE}" --text "${TEXT}" --center --window-icon "video" --image "stabilizer" --width 500 \
    --form --item-separator='|' \
    --field="Rotate:CHK" "${CHECK_ROTATE}" \
    --field="  - Angle (${FILE_ROTATE}° detected):NUM" "${FILE_ROTATE}|0..359" \
    --field="  - Resize ratio (${VIDEO_RATIO} for 90°):CB" "${VIDEO_RATIO}|1" \
    --field="Stabilize:CHK" "TRUE" \
    --field="  - Stabilization filter:CB" "${LST_FILTER}" \
    --field="  - Shakiness [ 0 ... 10 ]:NUM" "${STAB_SHAKINESS}|1..10" \
    --field="  - Smoothing [ 0 ... 100 ]:NUM" "${STAB_SMOOTHING}|0..100"  \
    --field="  - Optimal Zoom [ 0, 1, 2 ]:NUM" "${STAB_OPTZOOM}|0..2" \
    --field="Encoder:LBL" "final" \
    --field="  - ${VIDEO_CODEC} video bitrate (Kbits/s):NUM" "${VIDEO_RATE}|1..50000" \
    --field="  - ${AUDIO_CODEC} audio bitrate (Kbits/s):NUM" "${AUDIO_RATE}|1..320")

  # retrieve parameters
  ROTATE=$(echo ${CHOICE} | cut -d'|' -f1)
  ROTATE_ANGLE=$(echo ${CHOICE} | cut -d'|' -f2 | sed 's/^\([0-9]*\).*$/\1/')
  ROTATE_RATIO=$(echo ${CHOICE} | cut -d'|' -f3)
  STABILIZE=$(echo ${CHOICE} | cut -d'|' -f4)
  STAB_FILTER=$(echo ${CHOICE} | cut -d'|' -f5)
  STAB_SHAKINESS=$(echo ${CHOICE} | cut -d'|' -f6 | sed 's/^\([0-9]*\).*$/\1/')
  STAB_SMOOTHING=$(echo ${CHOICE} | cut -d'|' -f7 | sed 's/^\([0-9]*\).*$/\1/')
  STAB_OPTZOOM=$(echo ${CHOICE} | cut -d'|' -f8 | sed 's/^\([0-9]*\).*$/\1/')
  VIDEO_RATE=$(echo ${CHOICE} | cut -d'|' -f10 | sed 's/^\([0-9]*\).*$/\1/')
  AUDIO_RATE=$(echo ${CHOICE} | cut -d'|' -f11 | sed 's/^\([0-9]*\).*$/\1/')
fi

# if rotation and/or stabilisation are selected, encode final video
if [ "$STABILIZE" = "TRUE" ] || [ "$ROTATE" = "TRUE" ];
then
  (
  # if needed, generate stabilizer parameters array
  [ "$STABILIZE" = "TRUE" ] && ARR_STABILIZE=("-filter" "${STAB_FILTER}" "filename=${FILE_TRF}" "shakiness=${STAB_SHAKINESS}" \
                                              "smoothing=${STAB_SMOOTHING}" "optzoom=${STAB_OPTZOOM}" "${STAB_EXTRA[@]}")

  # if needed, convert angle for filter use and set rotation filter
  X_ANGLE=$(echo "${ROTATE_ANGLE} * 10 / 2" | bc)
  [ "$ROTATE" = "TRUE" ] && ARR_ROTATE=("-filter" "affine" "transition.fix_rotate_x=${X_ANGLE}" \
                                        "transition.scale_x=${ROTATE_RATIO}" "transition.scale_y=${ROTATE_RATIO}")

  # generate encoder parameters array
  ARR_ENCODE=("vcodec=${VIDEO_CODEC}" "b=${VIDEO_RATE}k" "acodec=${AUDIO_CODEC}" "ab=${AUDIO_RATE}k" "${ENCODE_OPTION[@]}")

  # ------------------------------------------
  # Rotation / Stabilization analysis
  # ------------------------------------------
  ${CMD_MELT} -progress "${FILE_PATH}" ${ARR_ROTATE[@]} ${ARR_STABILIZE[@]} -consumer xml:"${FILE_MLT}" all=1 2>"${FILE_LOG}" &

  # get the process id
  PID=$(ps aux | grep "${CMD_MELT}" | grep "${FILE_PATH}" | awk '{print $2}')
  echo "${PID}" > "${FILE_PID}"

  while [ "$PID" != "" ] 
  do    
    # check if process is still running
    PID=$(ps aux | awk '{print $2}' | grep ${PID})

    # calculate process completion
    LOG_LINE=$(cat "${FILE_LOG}" | tail -n 1)
    LOG_FRAME=$(echo "${LOG_LINE}" | sed 's/^.*Frame:[ ]*\([0-9]*\).*$/\1/g')
    LOG_PERCENT=$(echo "${LOG_LINE}" | sed 's/^.*percentage:[ ]*\([0-9]*\).*$/\1/g')
    [ "$LOG_PERCENT" != "" ] && LOG_PROGRESS=$(echo "${LOG_PERCENT} / 2" | bc)
 
    # display process completion
    echo "# Analysing frame ${LOG_FRAME}"
    echo "${LOG_PROGRESS}"

    # wait for 2 seconds
    sleep 2
  done

  # ------------------------------------------
  #  Final result encoding
  # ------------------------------------------
  ${CMD_MELT} -progress "${FILE_MLT}" -audio-track "${FILE_PATH}" -consumer avformat:"${FILE_STAB}" ${ARR_ENCODE[@]} 2>"${FILE_LOG}" &

  # get the process id
  PID=$(ps aux | grep "${CMD_MELT}" | grep "${FILE_MLT}" | awk '{print $2}')
  echo "${PID}" > "${FILE_PID}"

  # follow the stabilization progress
  while [ "$PID" != "" ] 
  do    
    # check if process is still running
    PID=$(ps aux | awk '{print $2}' | grep ${PID})

    # calculate process completion
    LOG_LINE=$(cat "${FILE_LOG}" | tail -n 1)
    LOG_FRAME=$(echo "${LOG_LINE}" | sed 's/^.*Frame:[ ]*\([0-9]*\).*$/\1/g')
    LOG_PERCENT=$(echo "${LOG_LINE}" | sed 's/^.*percentage:[ ]*\([0-9]*\).*$/\1/g')
    [ "$LOG_PERCENT" != "" ] && LOG_PROGRESS=$(echo "50 + ( ${LOG_PERCENT} / 2 )" | bc)

    # display process completion
    echo "# Generating frame ${LOG_FRAME}"
    echo "${LOG_PROGRESS}"

    # wait for 2 seconds
    sleep 2
  done

  # ------------------------------------------
  #  End of job
  # ------------------------------------------

  # remove PID file
  rm "${FILE_PID}"

  # declare end of processing
  echo "# File processed and available"
  echo "100"
  ) | yad --center --width=600 --window-icon "video" --image "stabilizer" --progress --title "${FILE_PATH}"
fi

# -------------------------------------------------------
#  After job cleanup
# -------------------------------------------------------

# if process is still running (operation has been canceled), kill the process
[ -f "${FILE_PID}" ] && PID=$(cat "${FILE_PID}") || PID=""
[ "$PID" != "" ] && kill -9 "${PID}"

#  cleaning-up of all temporary files
[ -f "${FILE_LOG}" ] && rm "${FILE_LOG}"
[ -f "${FILE_MLT}" ] && rm "${FILE_MLT}"
[ -f "${FILE_TRF}" ] && rm "${FILE_TRF}"
[ -f "${FILE_PID}" ] && rm "${FILE_PID}"
