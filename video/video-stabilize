#!/bin/bash
# --------------------------------------------
#  Video Shooting Stabilization
#  Command-line & Nautilus script
#  Depends on :
#   * melt 0.9.2+
#   * ffmpeg 0.98+
#   * yad
#  Revision history :
#  04/03/2012 - Creation by N. Bernaerts
#  04/04/2012 - Add codecs as parameters
#  09/01/2015 - Completle rewrite for 14.04LTS 
#               Handles exif rotation thanks to Guy Eagling
# -------------------------------------------

# ----------------------------------------------------
#  User variable section
#  Please, do not modify anything out of this section
# ----------------------------------------------------

# list of input video extensions
ARR_EXT=("mp4" "mov" "avi" "mp4" "mkv" "3gp")

# You can define default encoding codec and rates in kbits/s
VIDEO_CODEC="libx264"
VIDEO_RATE=20000
AUDIO_CODEC="libmp3lame"
AUDIO_RATE=128

# You can setup optional parameters for stabilization & h264 encoding
OPTION_STABILIZER="shakiness=4"
OPTION_ENCODER="tune=film preset=slow"

# ------------------------------------
# retrieve or select video file
# ------------------------------------

# check if file extension given in parameter is in the list
FILE_PATH="$1"
FILE_EXT=$(echo "$1" | sed 's/^.*\.\(.*\)$/\1/')

echo "file : $FILE_PATH"
echo "extension : $FILE_EXT"

[ -f "$FILE_PATH" ] && EXT_OK=$(echo "${ARR_EXT[@]}" | grep --ignore-case $FILE_EXT)

echo "ext_ok : $EXT_OK"

# if no file or file not video file, open file selection dialog box
LIST_EXT=$(echo "*.${ARR_EXT[@]}" | sed 's/ / *\./g')
[ -z "$EXT_OK" ] && FILE_PATH=$(zenity --file-selection --file-filter="Video file (${LIST_EXT[@]})|${LIST_EXT[@]}" --title="Select video file to stabilize")

# if file selected, lets continue
[ -f "$FILE_PATH" ] && CONTINUE=true || CONTINUE=false

echo "file selected : $FILE_PATH"
echo "continue : $CONTINUE"

# ----------------
#  Initialisation
# ----------------

if [ "$CONTINUE" = "true" ];
then
  STABILIZE="TRUE"
  CANCELED="FALSE"

  # generate the filenames
  FILE_BASE="$(echo "$FILE_PATH" | sed 's/^\(.*\)\..*$/\1/')"
  FILE_MLT="$FILE_BASE.mlt"
  FILE_LOG="$FILE_BASE.log"

  FILE_STAB="$FILE_BASE-stab.mp4"

  # get video metadata
  FILE_ROTATE=$(exiftool -s3 -rotation "$FILE_PATH")
  FILE_WIDTH=$(exiftool -s3 -imagewidth "$FILE_PATH")
  FILE_HEIGHT=$(exiftool -s3 -imageheight "$FILE_PATH")

  # get encoding parameters using local number decimal separator (, or .)
  SEPARATOR=$(printf "%'.2f" 1 | sed 's/^1\(.\).*$/\1/')
  VIDEO_RATIO=$(echo "scale=2; $FILE_WIDTH / $FILE_HEIGHT" | bc | sed 's/[\.\,]/'$SEPARATOR'/g')
fi

# --------------------------------------------
#  function to follow progress of the process
# --------------------------------------------
MELT_PROGRESS()
{
# loop till the end of melt process
PERCENTAGE=0
while [ "$PERCENTAGE" != "100" ]
do    
  # wait for 1 second
  sleep 1

  # if process is still running
  RESULT=`ps aux | awk '{print $2 }' | grep $PID`
  if [ "$RESULT" -eq "$PID" ]
  then
    # get percentage of completion
    PERCENTAGE=`cat "${FILE_LOG}" | tail -n 1 | sed 's/^.*percentage:[ ]*\([0-9]*\).*$/\1/g'`
  else
    # else, force percentage to 100
    PERCENTAGE="100"
  fi 

  # display current percentage
  echo $PERCENTAGE
done | yad --width=400 --height=30 --progress --auto-close --title "$TITLE" --text "$TEXT"

# if encode has been canceled, kill the current process
CANCELED="FALSE"
RESULT=`ps aux | awk '{print $2 }' | grep $PID`
if [ "$RESULT" -eq "$PID" ]
then
  kill $PID
  CANCELED="TRUE"
fi
}

# -----------------------------------
#  Selection of encoding parameters
# -----------------------------------
TITLE="Stabilization of ${ORIGINAL}"
TEXT="\nFinal video file will use $VIDEO_CODEC video and $AUDIO_CODEC audio.\nPlease select the encoding parameters :\n"
CHOICE=$(yad  --title "$TITLE" --text "$TEXT" --image "dialog-question" --form --field="Video rate (Kbit):NUM" ${VIDEO_RATE} --field="Audio rate (Kbit):NUM" ${AUDIO_RATE})
#CHOICE=$(zenity  --title "$TITLE" --text "$TEXT" --image "dialog-question" --forms --add-entry="Video bitrate (Mbit)" ${VIDEO_RATE} --add-entry="Audio bitrate (Kbit)" ${AUDIO_RATE})

echo $CHOICE

# extract the parameters
STABILIZE=`echo ${CHOICE}  | cut -d"|" -f1`
VIDEO_RATE=`echo ${CHOICE} | cut -d"|" -f2 | cut -d"," -f1 | cut -d"." -f1`
AUDIO_RATE=`echo ${CHOICE} | cut -d"|" -f3 | cut -d"," -f1 | cut -d"." -f1`

# -------------------------
#  Phase 1 : Stabilization
# -------------------------
if [ "$STABILIZE" = "TRUE" ]
then
  # set text & title of progress window
  TITLE="1 - Stabilization of ${ORIGINAL}"
  TEXT="This phase may take a long time ...\n"

  # start the stabilization phase with melt and videostab2 filter
  #melt -progress "${ORIGINAL}" -filter videostab2 ${OPTION_STABILIZER} -consumer xml:"${FILE_MLT}" all=1 real_time=-2 2>"${FILE_LOG}" &

  # get the process id
  #PID=`ps -ef | grep melt | grep "${ORIGINAL}" | sed 's/^'$USER'[ ]*\([0-9]*\).*$/\1/g'`
 
  # follow the stabilization progress
  #MELT_PROGRESS
fi

# if canceled, no encoding to be done
if [ "$CANCELED" = "TRUE" ]
then
  VIDEO_RATE=0
fi

# --------------------
#  Phase 2 : Encoding
# --------------------
if [ "$VIDEO_RATE" -gt "0" ]
then
   # set text & title of progress window
  TITLE="2 - Encoding of ${FILE_STAB}"
  TEXT="This phase may also take a long time ...\n"

  # start melt encoding process with stabilized video and original audio
  #melt -progress "${FILE_MLT}" -audio-track "${ORIGINAL}" -consumer avformat:"${FILE_STAB}" vcodec=${VIDEO_CODEC} b=${VIDEO_RATE}k acodec=${AUDIO_CODEC} ab=${AUDIO_RATE}k ${OPTION_ENCODER} 2>"${FILE_LOG}" &

  # get the process id
  #PID=`ps -ef | grep melt | grep "${FILE_MLT}" | sed 's/^'$USER'[ ]*\([0-9]*\).*$/\1/g'`
 
  # follow the stabilization progress
  #MELT_PROGRESS
fi

# ------------------------------------
#  cleaning-up of all temporary files
# ------------------------------------
rm "${FILE_LOG}"
rm "${FILE_MLT}"

exit 0
