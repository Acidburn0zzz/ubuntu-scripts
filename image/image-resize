#!/bin/bash
# --------------------------------------------
#  Resize image to a list of formats
#   formats are given by ~/.resize-pix.conf
#  Depends on :
#   * imagemagick
#  Revision history :
#   23/10/2013, V1.0 - Creation by N. Bernaerts
#   04/02/2014, V1.1 - Add multiple files selection
#   01/04/2014, V1.2 - Add format selection
#   16/12/2014, V1.3 - Add file selection dialog box
#   16/12/2014, V2.0 - Rewrite parameters and file selection handling
#   24/01/2015, V2.1 - Check tools availability
#   08/06/2015, V3.0 - Add picture format, compression ratio and tag copy
# ---------------------------------------------------

# check tools availability
command -v convert >/dev/null 2>&1 || { zenity --error --text="Please install convert [imagemagick]"; exit 1; }
command -v identify >/dev/null 2>&1 || { zenity --error --text="Please install identify [imagemagick]"; exit 1; }

# configuration file
FILE_CONF="$HOME/.config/image-resize.conf"

# set separator as carriage return
IFS=$'\n'

# loop thru arguments to load candidate files or files in directory
for ARGUMENT
do
  [ -f "${ARGUMENT}" ] && ARR_FILE=("${ARR_FILE[@]}" "${ARGUMENT}")
  [ -d "${ARGUMENT}" ] && ARR_FILE=("${ARR_FILE[@]}" $(find "${ARGUMENT}" -maxdepth 1 -type f) )
done
NBR_FILE=${#ARR_FILE[@]}

# if no file is candidate thru arguments, open files selection dialog box
[ $NBR_FILE -eq 0 ] && ARR_FILE=($(zenity --file-selection --multiple --separator=$'\n' --file-filter='Images (jpg,png,bmp,gif,tiff)| *.jpg *.jpeg *.png *.bmp *.gif *.tiff' --title="Select images to resize"))

# loop thru candidate files to keep only images
for FILE in "${ARR_FILE[@]}"
do
  FILE_TYPE=$(file --mime-type "$FILE"  | sed 's/^.*: *\([a-z]*\).*$/\1/')
  [ "$FILE_TYPE" = "image" ] && ARR_IMAGE=("${ARR_IMAGE[@]}" "$FILE")
done
NBR_IMAGE=${#ARR_IMAGE[@]}

# if some pix are selected, start conversion
if [ $NBR_IMAGE -gt 0 ];
then
  # load target formats into array
  ARR_FORMAT=( $(cat "${FILE_CONF}") )

  # extract data and load choice array
  INDEX=0
  for CUR_FORMAT in "${ARR_FORMAT[@]}"
  do
    # get different data
    FORMAT_NAME=$(echo $CUR_FORMAT | cut -d"," -f1)
    FORMAT_WIDTH=$(echo $CUR_FORMAT | cut -d"," -f2)
    FORMAT_HEIGHT=$(echo $CUR_FORMAT | cut -d"," -f3)
    FORMAT_TYPE=$(echo $CUR_FORMAT | cut -d"," -f4)
    FORMAT_QUALITY=$(echo $CUR_FORMAT | cut -d"," -f5)
    FORMAT_PREFIX=$(echo $CUR_FORMAT | cut -d"," -f6)

    # load arrays accordingly
    ARR_NAME=("${ARR_NAME[@]}" "${FORMAT_NAME}")
    ARR_WIDTH=("${ARR_WIDTH[@]}" "${FORMAT_WIDTH}")
    ARR_HEIGHT=("${ARR_HEIGHT[@]}" "${FORMAT_HEIGHT}")
    ARR_TYPE=("${ARR_TYPE[@]}" "${FORMAT_TYPE}")
    ARR_QUALITY=("${ARR_QUALITY[@]}" "${FORMAT_QUALITY}")
    ARR_PREFIX=("${ARR_PREFIX[@]}" "${FORMAT_PREFIX}")

    # load selection array
    ARR_CHOICE=("${ARR_CHOICE[@]}" "${INDEX}" "${FORMAT_NAME} [${FORMAT_WIDTH}x${FORMAT_HEIGHT}] .${FORMAT_TYPE}")
    INDEX=$((INDEX+1))
  done

  # display format selection box
  ZENH=$((150+INDEX*30))
  RESULT=$(zenity --title "Image resizer" --text "$NBR_IMAGE files will be resized. Select target format :" \
                  --width 400 --height $ZENH --list --column="Index" --column="Format" --hide-column=1 ${ARR_CHOICE[@]})

  # if one format has been selected
  if [ -n "$RESULT" ]
  then
    # get choice parameters
    NAME="${ARR_NAME[$RESULT]}"
    WIDTH="${ARR_WIDTH[$RESULT]}"
    HEIGHT="${ARR_HEIGHT[$RESULT]}"
    TYPE="${ARR_TYPE[$RESULT]}"
    QUALITY="${ARR_QUALITY[$RESULT]}"
    PREFIX="${ARR_PREFIX[$RESULT]}"

    # loop thru files
    for (( CURRENT=0; CURRENT<NBR_IMAGE; CURRENT++ ))
    do
      # generate output filemane
      FILE_INPUT=${ARR_IMAGE[$CURRENT]}
      DIRECTORY=$(dirname "${FILE_INPUT}")
      BASEFILE=$(basename "${FILE_INPUT}")
      BASENAME=$(echo ${BASEFILE} | sed 's/^\(.*\)[.].*$/\1/g')

      # generate file names
      FILE_OUTPUT="${DIRECTORY}/${PREFIX}-${BASENAME}.${TYPE}"
      FILE_TAG="${DIRECTORY}/${BASENAME}.exv"

      # display progress
      echo $((CURRENT*100/NBR_IMAGE))

      # display current image filename
      echo "# ${BASEFILE}"

      # get image width and height
      PIX_WIDTH=$(identify -format "%w" "${FILE_INPUT}")
      PIX_HEIGHT=$(identify -format "%h" "${FILE_INPUT}")

      # if image is horizontal, set size to target width, else set size to target height
      [ "$PIX_WIDTH" -gt "$PIX_HEIGHT" ] && SIZE="$WIDTH" || SIZE="x$HEIGHT"

      # convert picture with auto orientation
      convert -auto-orient "${FILE_INPUT}" -resize "${SIZE}" -quality $QUALITY "${FILE_OUTPUT}"

    done | zenity --width=500 --height=25 --progress --auto-close --title "Resizing to > ${NAME} <"
  fi
fi
