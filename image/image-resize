#!/bin/bash
# --------------------------------------------
#  Resize image to a list of formats
#   formats are given by ~/.resize-pix.conf
#  Depends on :
#   * imagemagick
#  Revision history :
#  23/10/2013, V1.0 - Creation by N. Bernaerts
#  04/02/2014, V1.1 - Add multiple files selection
#  01/04/2014, V1.2 - Add format selection
#  16/12/2014, V1.3 - Add file selection dialog box
#  16/12/2014, V2.0 - Rewrite parameters and file selection handling
# -------------------------------------------

# set default jpg quality
QUALITY="85"

# set separator as carriage return
IFS=$'\n'

# loop thru arguments to load candidate files or files in directory
for arg
do
[ -f "$arg" ] && ARR_FILE=("${ARR_FILE[@]}" "$arg")
[ -d "$arg" ] && ARR_FILE=("${ARR_FILE[@]}" $(find "$arg" -maxdepth 1 -type f) )
done
NBR_FILE=${#ARR_FILE[@]}

# if no file is candidate thru arguments, open files selection dialog box
[ $NBR_FILE -eq 0 ] && ARR_FILE=($(zenity --file-selection --multiple --separator=$'\n' --file-filter='Images (jpg,png,bmp,gif,tiff)| *.jpg *.jpeg *.png *.bmp *.gif *.tiff' --title="Select images to resize"))

# loop thru candidate files to keep only images
for FILE in "${ARR_FILE[@]}"
do
  FILE_TYPE=$(file --mime-type "$FILE"  | sed 's/^.*: *\([a-z]*\).*$/\1/')
  [ "$FILE_TYPE" = "image" ] && ARR_IMAGE=("${ARR_IMAGE[@]}" "$FILE")
done
NBR_IMAGE=${#ARR_IMAGE[@]}

# if some pix are selected, start conversion
if [ $NBR_IMAGE -gt 0 ];
then
  # load target formats into array
  ARR_FORMAT=( `cat "$HOME/.resize-pix.conf" `)

  # extract data and load choice array
  INDEX=0
  for CUR_FORMAT in "${ARR_FORMAT[@]}"
  do
    # get different data
    NAME=`echo $CUR_FORMAT | cut -d"," -f1`
    WIDTH=`echo $CUR_FORMAT | cut -d"," -f2`
    HEIGHT=`echo $CUR_FORMAT | cut -d"," -f3`
    PREFIX=`echo $CUR_FORMAT | cut -d"," -f4`

    # load arrays accordingly
    ARR_NAME=("${ARR_NAME[@]}" "$NAME")
    ARR_WIDTH=("${ARR_WIDTH[@]}" "$WIDTH")
    ARR_HEIGHT=("${ARR_HEIGHT[@]}" "$HEIGHT")
    ARR_PREFIX=("${ARR_PREFIX[@]}" "$PREFIX")

    # load selection array
    ARR_CHOICE=("${ARR_CHOICE[@]}" "$INDEX" "$NAME (${WIDTH}x${HEIGHT})")
    INDEX=$((INDEX+1))
  done

  # display format selection box
  ZENH=$((150+INDEX*30))
  RESULT=`zenity --title "Image resizer" --text "$NBR_IMAGE files will be resized. Select target format :" --width 400 --height $ZENH --list --column="Index" --column="Format" --hide-column=1 ${ARR_CHOICE[@]}`

  # if one format has been selected
  if [ -n "$RESULT" ]
  then
    # get choice parameters
    NAME="${ARR_NAME[$RESULT]}"
    WIDTH="${ARR_WIDTH[$RESULT]}"
    HEIGHT="${ARR_HEIGHT[$RESULT]}"
    PREFIX="${ARR_PREFIX[$RESULT]}"

    # loop thru files
    for (( CURRENT=0; CURRENT<NBR_IMAGE; CURRENT++ ))
    do
      # generate output filemane
      INPUTFILE=${ARR_IMAGE[$CURRENT]}
      DIRECTORY=$(dirname "$INPUTFILE")
      BASEFILE=$(basename "$INPUTFILE")
      BASENAME=`echo ${BASEFILE} | sed 's/^\(.*\)[.].*$/\1/g'`
      OUTPUTFILE="$DIRECTORY/$PREFIX/$BASENAME.jpg"

      # create sub directory
      mkdir --parents "$DIRECTORY/$PREFIX"

      # display progress
      echo $((CURRENT*100/NBR_IMAGE))

      # display current image filename
      echo "# Resizing $BASEFILE to $NAME format"

      # get image width and height
      PIX_WIDTH=`identify -format "%w" "$INPUTFILE"`
      PIX_HEIGHT=`identify -format "%h" "$INPUTFILE"`

      # if image is horizontal, set size to target width, else set size to target height
      [ "$PIX_WIDTH" -gt "$PIX_HEIGHT" ] && SIZE="$WIDTH" || SIZE="x$HEIGHT"

      # convert picture with auto orientation
      convert -auto-orient "$INPUTFILE" -resize "$SIZE" -quality $QUALITY "$OUTPUTFILE"

    done | zenity --width=500 --height=25 --progress --auto-close --title "Image resizer"
  fi
fi
