#!/bin/bash
# ---------------------------------------------------
# Tool to synchronise Toshiba Flashair SD Card
# It synchronise either :
#   - directory content
#   - media files
#
# Revision history :
#   30/03/2017, V1.0 - Creation by N. Bernaerts
#   15/04/2017, V1.1 - Complete rewrite with parameters
# ---------------------------------------------------

# check tools
command -v curl >/dev/null 2>&1 || { echo "Please install curl"; exit 1; }
command -v composite >/dev/null 2>&1 || { echo "Please install composite [imagemagick package]"; exit 1; }
command -v convert >/dev/null 2>&1 || { echo "Please install convert [imagemagick package]"; exit 1; }
command -v inotifywait >/dev/null 2>&1 || { echo "Please install inotifywait [inotify-tools package]"; exit 1; }
command -v zenity >/dev/null 2>&1 || { echo "Please install zenity package"; exit 1; }

# set configuration file
FLASHAIR_CONF="/etc/flashair.conf"
FLASHAIR_FILELIST=".flashair.filelist"

# empty arrays
ARR_ITEM=()

# if no argument, display help
if [ $# -eq 0 ] 
then
	echo "Tool to synchronise Toshiba Flashair SD Card content"
	echo "Only usable if laptop is connected to a Toshiba FlashAir wifi network"
	echo "Parameters are :"
	echo "  --connect              Actions to setup new connexion"
	echo "  --disconnect           Actions to deal with a disconnexion"
	echo "  --update               Update directory content from Flashair card"
	echo "  --download             Download files from Flashair card"
	echo "  --upload               Write files to Flashair card"
	echo "  --delete               Delete file from Flashair card (file only)"
	echo "  <item1> <item2> ...    Files/directories to handle"
fi

# loop to retrieve arguments
while test $# -gt 0
do
	case "$1" in
	"--connect") MODE="connect"; shift; ;;
	"--disconnect") MODE="disconnect"; shift; ;;
	"--update") MODE="update"; shift; ;;
	"--download") MODE="download"; shift; ;;
	"--upload") MODE="upload"; shift; ;;
	"--delete") MODE="delete"; shift; ;;
	*) ARR_ITEM=( "${ARR_ITEM[@]}" "$1" ); shift; ;;
	esac
done

# create temporary files
TMP_HEADER=$(mktemp --tmpdir header-XXXXXXXXX.html)
TMP_FILE=$(mktemp --tmpdir file-XXXXXXXXX.jpg)
TMP_THUMB=$(mktemp --tmpdir thumb-XXXXXXXXX.jpg)

# get default parameters from flashair.conf
FLASHAIR_ROOT=$(grep "^flashair-mount=" "${FLASHAIR_CONF}" | cut -d'=' -f2-)
FLASHAIR_USER=$(grep "^flashair-user=" "${FLASHAIR_CONF}" | cut -d'=' -f2-)
FLASHAIR_CONFIRM=$(grep "^confirm-${MODE}=" "${FLASHAIR_CONF}" | cut -d'=' -f2-)

# if default user not defined, get currently connected user
[ "${FLASHAIR_USER}" = "" ] && FLASHAIR_USER=$(ps hau | grep -v "^root" | head -n 1 | cut -d' ' -f1)

# get number of files
NBR_ITEM=${#ARR_ITEM[@]}

# by default, action is confirmed
CONFIRMED=0

# Thumbnailing function
#  $1 - input thumbnail
#  $2 - target thumbnail
#  $3 - file size
#  $4 - state (available or download)
function create_thumbnail() {
	TMP_INPUT=$(mktemp --tmpdir icon-XXXXXXXXX.png)
	TMP_BULLET=$(mktemp --tmpdir bullet-XXXXXXXXX.png)

	# generate icon with 192 pixel width
	convert -resize 192x "$1" "${TMP_INPUT}"

	# get file size and state
	FILE_SIZE=$(numfmt --to=iec $3)
	FILE_STATE=$4

	# generate bullet
	convert -fill white -pointsize 28 -draw 'text 50,34 "'${FILE_SIZE}'"' "/usr/share/icons/flashair-status-${FILE_STATE}.png" "${TMP_BULLET}"

	# create thumbnail with bullet
	composite -gravity SouthEast "${TMP_BULLET}" "${TMP_INPUT}" "$2"

	# remove temporary file
	rm -f "${TMP_INPUT}" "${TMP_BULLET}"
}

# ------------------------------------------
#  Step 1
#
#   Main parameters and confirmation
#
# ------------------------------------------

case "${MODE}" in

	# -----------------------------
	#  flashair network connexion
	# -----------------------------
	"connect")

	# get flashair network address
	FLASHAIR_INTERFACE="${ARR_ITEM[0]}"
	FLASHAIR_NETWORK=$(ifconfig | sed -n -e '/'${FLASHAIR_INTERFACE}'/,$p' | grep "inet addr" | sed "s/^.*inet addr:\([0-9.]*\).*$/\1/" | cut -d'.' -f1-3)

	# look for entry in /etc/hosts
	FLASHAIR_ENTRY=$(grep " flashair$" "/etc/hosts")
	if [ "${FLASHAIR_ENTRY}" = "" ]
	then
		# create flashair entry in /etc/hosts
		echo "# flashair card" >> "/etc/hosts"
		echo "${FLASHAIR_NETWORK}.1 flashair" >> "/etc/hosts"
	else
		# update flashair address in /etc/hosts
		sed -i "s/^.* flashair$/${FLASHAIR_NETWORK}.1 flashair/g" "/etc/hosts"
	fi

	# if neeeded, create media directory
	[ ! -d "${FLASHAIR_ROOT}" ] && { mkdir "${FLASHAIR_ROOT}"; chmod 777 "${FLASHAIR_ROOT}"; }

	# if first time, create flashair bookmark to user nautilus configuration
	FLASHAIR_BOOKMARK=$(grep "${FLASHAIR_ROOT}" "/home/${FLASHAIR_USER}/.config/gtk-3.0/bookmarks")
	[ "${FLASHAIR_BOOKMARK}" = "" ] && echo "file://${FLASHAIR_ROOT} Flashair (disconnected)" >> "/home/${FLASHAIR_USER}/.config/gtk-3.0/bookmarks" 

	# get the upload status of the card
	UPLOAD_ENABLED=$(curl "http://flashair/CONFIG" | grep "UPLOAD=1")

	# update nautilus bookmark with (connected)
	sed -i "s/Flashair.*$/Flashair (connected)/g" "/home/${FLASHAIR_USER}/.config/gtk-3.0/bookmarks"

	# enable right click download menu
	sed -i "s/^Enabled=.*$/Enabled=true/g" "/usr/local/share/file-manager/actions/flashair-action-download.desktop"

	# if upload is allowed, enable right click upload and delete menus
	[ "${UPLOAD_ENABLED}" != "" ] && sed -i "s/^Enabled=.*$/Enabled=true/g" "/usr/local/share/file-manager/actions/flashair-action-upload.desktop"
	[ "${UPLOAD_ENABLED}" != "" ] && sed -i "s/^Enabled=.*$/Enabled=true/g" "/usr/local/share/file-manager/actions/flashair-action-delete.desktop"
	;;

	# -----------------------------
	#  flashair network disconnexion
	# -----------------------------
	"disconnect")

	# disable right click menus
	sed -i "s/^Enabled=.*$/Enabled=false/g" "/usr/local/share/file-manager/actions/flashair-action-download.desktop"
	sed -i "s/^Enabled=.*$/Enabled=false/g" "/usr/local/share/file-manager/actions/flashair-action-upload.desktop"
	sed -i "s/^Enabled=.*$/Enabled=false/g" "/usr/local/share/file-manager/actions/flashair-action-delete.desktop"

	# update nautilus bookmark with (disconnected)
	sed -i "s/Flashair.*$/Flashair (disconnected)/g" "/home/${FLASHAIR_USER}/.config/gtk-3.0/bookmarks" 
	;;

	# -----------------------------
	#  media files download
	# -----------------------------
	"download")

	# if needed, ask confirmation
	TEXT="${NBR_ITEM} files will be downloaded from your Flashair card\n\nDo you want to continue ?"
	[ "${FLASHAIR_CONFIRM}" = "true" ] && { zenity --question --title "Download" --text "${TEXT}"; CONFIRMED=$?; }

	# if download canceled, empty array of items
	[ ${CONFIRMED} -eq 1 ] && ARR_ITEM=( )

	# loop to analyse items
	for ITEM in "${ARR_ITEM[@]}"
	do
		# if item is a file
		if [ -f "${ITEM}" ]
		then
			# get basename, dirname and file size
			ITEM_NAME=$(basename "${ITEM}")
			ITEM_DIR=$(dirname "${ITEM}")
			ITEM_SIZE=$(stat -c %s "${ITEM}")

			# path of item on flashair card
			CARD_ITEM_PATH=$(echo "${ITEM}" | sed "s|^${FLASHAIR_ROOT}||")

			# generate .flashair filelist path
			ITEM_FILELIST="${ITEM_DIR}/${FLASHAIR_FILELIST}"

			# get file size on flashair card
			CARD_ITEM_SIZE=$(grep ",${ITEM_NAME}," "${ITEM_FILELIST}" | cut -d',' -f3)

			# if file exists on flashair and size differs, add file to the download array
			if [ "${CARD_ITEM_SIZE}" != "" -a "${CARD_ITEM_SIZE}" != "${ITEM_SIZE}" ]
			then
				# download embedded thumbnail
				curl -o "${TMP_FILE}" --dump-header "${TMP_HEADER}" "http://flashair/thumbnail.cgi?${CARD_ITEM_PATH}"

				# create thumbnail with bullet and file size
				THUMB_OK=$(grep "image/jpeg" "${TMP_HEADER}")
				[ "${THUMB_OK}" != "" ] && create_thumbnail "${TMP_FILE}" "${TMP_THUMB}" "${CARD_ITEM_SIZE}" "download" \
							|| create_thumbnail "/usr/share/icons/flashair-generic.jpg" "${TMP_THUMB}" "${CARD_ITEM_SIZE}" "download"
			fi
		fi
	done
	;;

	# -----------------------------
	#  media files upload
	# -----------------------------
	"upload")

	# if needed, ask confirmation
	TEXT="${NBR_ITEM} files will be uploaded to your Flashair card\n\nDo you want to continue ?"
	[ "${FLASHAIR_CONFIRM}" = "true" ] && { zenity --question --title "Upload" --text "${TEXT}"; CONFIRMED=$?; }

	# if upload canceled, empty array of items
	[ ${CONFIRMED} -eq 1 ] && ARR_ITEM=( )
	;;

	# -----------------------------
	#  media files delete
	# -----------------------------
	"delete")

	# if needed, ask confirmation
	TEXT="${NBR_ITEM} files will be deleted from your Flashair card\n\nDo you want to continue ?"
	[ "${FLASHAIR_CONFIRM}" = "true" ] && { zenity --question --title "Delete" --text "${TEXT}"; CONFIRMED=$?; }

	# if deleted canceled, empty array of items
	[ ${CONFIRMED} -eq 1 ] && ARR_ITEM=( )
	;;

	*)
	;;
esac

# ------------------------------------------
#  Step 2
#
#  Action on files / directories
#
# ------------------------------------------

for ITEM in "${ARR_ITEM[@]}"
do

	# path of item on flashair card
	CARD_ITEM_PATH=$(echo "${ITEM}" | sed "s|^${FLASHAIR_ROOT}||")

	# action according to mode
	case "${MODE}" in

	# -----------------------------
	#  directory content update
	# -----------------------------
	"update")

	# generate local subitem path
	ITEM_FILELIST="${ITEM}/${FLASHAIR_FILELIST}"

	# retrieve directory content from flashair card
	curl "http://flashair/command.cgi?op=100&DIR=${CARD_ITEM_PATH}" | tail -n +2 > "${ITEM_FILELIST}"
	chmod 666 "${ITEM_FILELIST}"

	# loop thru directory content
	while read LINE;
	do
		# read current subitem data
		CARD_SUBITEM_NAME=$(echo "${LINE}" | cut -d',' -f2)
		CARD_SUBITEM_SIZE=$(echo "${LINE}" | cut -d',' -f3)
		CARD_SUBITEM_TYPE=$(echo "${LINE}" | cut -d',' -f4)

		# generate local subitem path
		SUBITEM="${ITEM}/${CARD_SUBITEM_NAME}"

		# if current subitem is a file
		if [ ${CARD_SUBITEM_TYPE} -ge 32 ]
		then
			# if file does not exist locally, get thumbnail
			if [ ! -f "${SUBITEM}" ]
			then
				# download embedded thumbnail
				curl -o "${TMP_FILE}" --dump-header "${TMP_HEADER}" "http://flashair/thumbnail.cgi?${CARD_ITEM_PATH}/${CARD_SUBITEM_NAME}"

				# create thumbnail with bullet and file size
				THUMB_OK=$(grep "image/jpeg" "${TMP_HEADER}")
				[ "${THUMB_OK}" != "" ] && create_thumbnail "${TMP_FILE}" "${TMP_THUMB}" "${CARD_SUBITEM_SIZE}" "available" \
							|| create_thumbnail "/usr/share/icons/flashair-generic.jpg" "${TMP_THUMB}" "${CARD_SUBITEM_SIZE}" "available"

				# move thumbnail to final directory (as rw.rw.rw.)
				mv "${TMP_THUMB}" "${SUBITEM}"
				chmod 666 "${SUBITEM}"
			fi

		# else, if current item is a directory 
		elif [ ${CARD_SUBITEM_TYPE} -ge 16 ]
		then
			# if local directory does not exist
			if [ ! -d "${SUBITEM}" ]
			then
				# create local subdirectory (as rwxrwxrwx)
				mkdir --parent "${SUBITEM}"
				chmod 777 "${SUBITEM}"
			fi
		fi
	done < "${ITEM_FILELIST}"
	;;

	# -----------------------------
	#  image download
	# -----------------------------
	"download")

	# download file
	curl -o "${TMP_FILE}" "http://flashair/${CARD_ITEM_PATH}"

	# move file to final directory (as rw.rw.rw.)
	chmod 666 "${TMP_FILE}"
	mv "${TMP_FILE}" "${ITEM}"
	;;

	# -----------------------------
	#  image upload
	# -----------------------------
	"upload")

	# get upload directory
	CARD_ITEM_DIR=$(dirname "${CARD_ITEM_PATH}")

	# set upload directory
	curl -o "${TMP_FILE}" --dump-header "${TMP_HEADER}" "http://flashair/upload.cgi?UPDIR=${CARD_ITEM_DIR}"

	# if upload directory set, start upload
	OPERATION_OK=$(grep "SUCCESS" "${TMP_FILE}")
	if [ "${OPERATION_OK}" != "" ]
	then
		# upload item
		curl --dump-header "${TMP_HEADER}" -i -X POST -H "Content-Type: multipart/form-data" -F "data=@${ITEM}" "http://flashair/upload.cgi"
	fi
	;;

	# -----------------------------
	#  image suppression
	# -----------------------------
	"delete")

	# send deletion command
	curl -o "${TMP_FILE}" --dump-header "${TMP_HEADER}" "http://flashair/upload.cgi?DEL=${CARD_ITEM_PATH}"

	# if deletion succesful, delete local file
	OPERATION_OK=$(grep "SUCCESS" "${TMP_FILE}")
	[ "${OPERATION_OK}" != "" ] && rm -f "${ITEM}"
	;;

	*)
	echo "Mode ${MODE} not supported"
	;;

	esac
done

# remove temporary files
rm -f "${TMP_FILE}" "${TMP_HEADER}" "${TMP_THUMB}"
