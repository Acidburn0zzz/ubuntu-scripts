#!/bin/bash
# --------------------------------------------
#  Generate a PDF document from a given list of documents
#  Documents are added in final document following
#  alphabetical order
#  Depends on :
#   * imagemagick
#   * unoconv
#   * ghostscript
#   * mimetype
#  Revision history :
#   05/07/2015, V1.0 - Creation by N. Bernaerts
#   15/08/2015, V1.1 - Force jpeg quality to 95
# ---------------------------------------------------

# -------------------------------------------------------
# check tools availability
# -------------------------------------------------------

command -v mimetype >/dev/null 2>&1 || { zenity --error --text="Please install mimetype"; exit 1; }
command -v convert >/dev/null 2>&1 || { zenity --error --text="Please install convert [imagemagick]"; exit 1; }
command -v unoconv >/dev/null 2>&1 || { zenity --error --text="Please install unoconv"; exit 1; }
command -v gs >/dev/null 2>&1 || { zenity --error --text="Please install gs utility [ghostscript]"; exit 1; }

# -------------------------------------------------------
#      Read parameters from configuration file
# -------------------------------------------------------

# Configuration file : ~/.config/pdf-generate.conf
FILE_CONF="$HOME/.config/pdf-generate.conf"

# check configuration file
[ -f "$FILE_CONF" ] || { zenity --error --text="Please create and configure ${FILE_CONF}"; exit 1; }

# Load configuration file
COMPRESSION=$(cat "${FILE_CONF}" | grep "compression" | cut -d'=' -f2)
DENSITY=$(cat "${FILE_CONF}" | grep "density" | cut -d'=' -f2)

# -------------------------------------------------------
#          Retrieve or select input files
# -------------------------------------------------------

# set separator as carriage return
IFS=$'\n'

# loop thru arguments to load candidate files
for ARGUMENT
do
  [ -f "${ARGUMENT}" ] && ARR_FILE=("${ARR_FILE[@]}" "${ARGUMENT}")
  [ -d "${ARGUMENT}" ] && ARR_FILE=("${ARR_FILE[@]}" $(find "${ARGUMENT}" -maxdepth 1 -type f) )
done

# if there is no candidate files, open selection dialog
if [ ${#ARR_FILE[@]} -eq 0 ]
then
  # open multiple files selection dialog box
  LST_FILE=$(zenity --center --width=800 --height=500 --window-icon "evince" --image "evince" \
                    --file --multiple --title="Select file to merge as PDF")

  # generate video files array
  ARR_FILE=($(echo "${LST_FILE}" | tr "|" "\n"))
fi 

# loop thru candidate files to convert them to pdf
for FILE in "${ARR_FILE[@]}"
do
  # get file name without extension
  FILE_BASE="$(echo "${FILE}" | sed 's/^\(.*\)\..*$/\1/')"

  # get file extension
  FILE_EXT="$(echo "${FILE}" | sed 's/^.*\.\(.*\)$/\1/')"

  # resulting PDF file name
  FILE_PDF="${FILE_BASE}.pdf"

  # resulting PDF file name
  [ -z "${FILE_FINAL}" ] && FILE_FINAL="${FILE_BASE}-merged.pdf"

  # get the file mime type (application/msword, ...)
  MIMETYPE=$(mimetype -b "${FILE}")

  # check if file is a libreoffice file
  CHECKTYPE=$(echo "${MIMETYPE}" | grep "image/")
  [ "${CHECKTYPE}" != "" ] && DOCTYPE="image"

  # check if file is a libreoffice file
  CHECKTYPE=$(echo "${MIMETYPE}" | grep ".opendocument.")
  [ "${CHECKTYPE}" != "" ] && DOCTYPE="libreoffice"

  # check if file is a ms office file
  case $MIMETYPE in 
    # ms-office document
    "application/msword" | "application/vnd.ms-word" | \
    "application/vnd.oasis.opendocument.text" | \
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document" | \
    "application/vnd.ms-excel" | \
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" | \
    "application/vnd.openxmlformats-officedocument.spreadsheetml.template" | \
    "application/vnd.ms-powerpoint" | \
    "application/vnd.openxmlformats-officedocument.presentationml.presentation" | \
    "application/vnd.openxmlformats-officedocument.presentationml.template" | \
    "application/vnd.openxmlformats-officedocument.presentationml.slideshow" )
      DOCTYPE="ms-office"
      ;;

    # PDF document
    "application/pdf" )
      DOCTYPE="pdf"
      ;;

    # plain text file
    "text/plain" )
      DOCTYPE="text"
      ;;

    * )
      ;;
  esac

  # convert file according to its type
  case $DOCTYPE in
    # PDF files
    "pdf" )
    ARR_PDF=("${ARR_PDF[@]}" "${FILE}")
    ;;

    # image files
    "image" )
    convert "${FILE}" -compress jpeg -quality 95 -resize 1654x2337 -gravity center -extent 1654x2337 -units PixelsPerInch -density 200x200 "${FILE_PDF}"
    ARR_TMP=("${ARR_TMP[@]}" "${FILE_PDF}")
    ARR_PDF=("${ARR_PDF[@]}" "${FILE_PDF}")
    ;;

    # office files
    "libreoffice" | "ms-office" | "text" )
    unoconv -f pdf -o "${FILE_PDF}" "${FILE}"
    ARR_TMP=("${ARR_TMP[@]}" "${FILE_PDF}")
    ARR_PDF=("${ARR_PDF[@]}" "${FILE_PDF}")
    ;;

    # other formats, not handled
    * )
    ;;
  esac

done

# if some PDF files have to be merged, final merge
if [ ${#ARR_PDF[@]} -gt 0 ]
then
  # order generated PDF files in alphabetical order
  ARR_SORTED=($(sort <<<"${ARR_PDF[*]}"))

  # generate resulting PDF
  gs -q -dNOPAUSE -dBATCH -dSAFER -sPAPERSIZE=a4 -dPDFFitPage -dCompatibilityLevel=1.4 -sDEVICE=pdfwrite -sOutputFile="${FILE_FINAL}" ${ARR_SORTED[@]}
fi

# loop to remove temporary files
for TMP_FILE in "${ARR_TMP[@]}"
do
  rm "${TMP_FILE}"
done
