#!/bin/bash
# ---------------------------------------------------------------------
#  Script to backup/restore current user folders and application data
#  on any removable media during computer complete reinstallation
#
#  Backup  :  ./data-transfer --backup ...
#  Restore :  ./data-transfer --restore  ...
#
#  All backup files will be stored under current folder
#
#  Revision history :
#   10/06/2016, V1.0 - Creation by N. Bernaerts
#   15/08/2016, V1.1 - Add target directory
#   10/04/2017, V1.2 - Add docky
# ---------------------------------------------------------------------

# check xdg-user-dir
command -v xdg-user-dir >/dev/null 2>&1 || { zenity --error --text="Please install xdg-user-dir utility"; exit 1; }

# set environments to backup/restore
#   ApplicationOrFolderName|BackupMode (tar:compress to tar.gz / dir:copy to directory)|DataPath
CFG_DESKTOP="desktop|dir|$(xdg-user-dir DESKTOP)"
CFG_DOCUMENTS="documents|tar|$(xdg-user-dir DOCUMENTS)"
CFG_MUSIC="music|dir|$(xdg-user-dir MUSIC)"
CFG_PICTURES="pictures|dir|$(xdg-user-dir PICTURES)"
CFG_VIDEOS="videos|dir|$(xdg-user-dir VIDEOS)"
CFG_SSH="ssh|tar|$HOME/.ssh"
CFG_FIREFOX="firefox|tar|$HOME/.mozilla/firefox"
CFG_THUNDERBIRD="thunderbird|tar|$HOME/.thunderbird"
CFG_TELEGRAM="telegram|tar|$HOME/.TelegramDesktop"
CFG_WHATSIE="whatsie|tar|$HOME/.config/Whatsie"
CFG_SKYPE="skype|tar|$HOME/.Skype"
CFG_DOCKY="docky|gconf|/apps/docky-2/Docky"

# by default, backup mode
RUN_MODE="backup"

# help message if no parameter
if [ ${#} -eq 0 ];
then
    echo "Script to backup/restore user data."
    echo "General parameters :"
    echo "  --backup            Backup files to current folder"
    echo "  --restore           Restore files from current folder"
    echo "Folders content :"
    echo "  --desktop           Desktop folder"
    echo "  --documents         Documents folder"
    echo "  --music             Music folder"
    echo "  --pictures          Pictures folder"
    echo "  --videos            Videos folder"
    echo "  --all-folders       All previous folders"
    echo "Application data :"
    echo "  --ssh               OpenSSH data"
    echo "  --firefox           Firefox data"
    echo "  --thunderbird       Thunderbird data"
    echo "  --telegram          Telegram data"
    echo "  --whatsie           WhatsIe data"
    echo "  --skype             Skype data"
    echo "  --docky             Docky configuration"
    echo "  --all-apps          All previous applications data"
    exit 1
fi

# iterate thru parameters
while test ${#} -gt 0
do
  case $1 in
    --backup) RUN_MODE="backup"; shift; ;;
    --restore) RUN_MODE="restore"; shift; ;;
    --desktop) ARR_TODO=( "${ARR_TODO[@]}" "${CFG_DESKTOP}" ); shift; ;;
    --documents) ARR_TODO=( "${ARR_TODO[@]}" "${CFG_DOCUMENTS}" ); shift; ;;
    --music) ARR_TODO=( "${ARR_TODO[@]}" "${CFG_MUSIC}" ); shift; ;;
    --pictures) ARR_TODO=( "${ARR_TODO[@]}" "${CFG_PICTURES}" ); shift; ;;
    --videos) ARR_TODO=( "${ARR_TODO[@]}" "${CFG_VIDEOS}" ); shift; ;;
    --all-folders) ARR_TODO=( "${ARR_TODO[@]}" "${CFG_DESKTOP}" "${CFG_DOCUMENTS}" "${CFG_MUSIC}" "${CFG_PICTURES}" "${CFG_VIDEOS}" ); shift; ;;
    --ssh) ARR_TODO=( "${ARR_TODO[@]}" "${CFG_SSH}" ); shift; ;;
    --firefox) ARR_TODO=( "${ARR_TODO[@]}" "${CFG_FIREFOX}" ); shift; ;;
    --thunderbird) ARR_TODO=( "${ARR_TODO[@]}" "${CFG_THUNDERBIRD}" ); shift; ;;
    --telegram) ARR_TODO=( "${ARR_TODO[@]}" "${CFG_TELEGRAM}" ); shift; ;;
    --whatsie) ARR_TODO=( "${ARR_TODO[@]}" "${CFG_WHATSIE}" ); shift; ;;
    --skype) ARR_TODO=( "${ARR_TODO[@]}" "${CFG_SKYPE}" ); shift; ;;
    --docky) ARR_TODO=( "${ARR_TODO[@]}" "${CFG_DOCKY}" ); shift; ;;
    --all-apps) ARR_TODO=( "${ARR_TODO[@]}" "${CFG_SSH}" "${CFG_FIREFOX}" "${CFG_THUNDERBIRD}" "${CFG_TELEGRAM}" "${CFG_WHATSIE}" "${CFG_SKYPE}" "${CFG_DOCKY}" ); shift; ;;
    *) shift; ;;
  esac
done

# set working directory to current directory
BACKUP_DIR=$(pwd)

# loop thru applications
for APP_TODO in "${ARR_TODO[@]}"
do
  # get data
  APP_NAME=$(echo ${APP_TODO} | cut -d'|' -f1)
  APP_MODE=$(echo ${APP_TODO} | cut -d'|' -f2)
  APP_PATH=$(echo ${APP_TODO} | cut -d'|' -f3)

  case "${RUN_MODE}" in

    "backup") 
      # tar.gz mode
      if [ "${APP_MODE}" = "tar" -a -d "${APP_PATH}" ]
      then
        rm --force "${BACKUP_DIR}/${APP_NAME}.tar.gz"
        cd "${APP_PATH}"
        tar -zcvf "${BACKUP_DIR}/${APP_NAME}.tar.gz" *

      # directory mode
      elif [ "${APP_MODE}" = "dir" -a -d "${APP_PATH}" ]
      then
        rmdir --parents "${BACKUP_DIR}/${APP_NAME}"
        mkdir "${BACKUP_DIR}/${APP_NAME}"
        cp --recursive --verbose ${APP_PATH}/* "${BACKUP_DIR}/${APP_NAME}"

      # gconf mode
      elif [ "${APP_MODE}" = "gconf" ]
      then
        gconftool-2 --dump "${APP_PATH}" > "${BACKUP_DIR}/${APP_NAME}.xml"
      fi
      ;;

    "restore") 
      # tar.gz mode
      if [ "${APP_MODE}" = "tar" -a -f "${BACKUP_DIR}/${APP_NAME}.tar.gz" ]
      then
        mkdir --parents "${APP_PATH}"
        rm --force --recursive ${APP_PATH}/*
        cd "${APP_PATH}"
        tar -zxvf "${BACKUP_DIR}/${APP_NAME}.tar.gz"

      # directory mode
      elif [ "${APP_MODE}" = "dir" -a -d "${BACKUP_DIR}/${APP_NAME}" ]
      then
        mkdir --parents "${APP_PATH}"
        rm --recursive --force ${APP_PATH}/*
        cp --recursive --verbose ${BACKUP_DIR}/${APP_NAME}/* "${APP_PATH}"

      # gconf mode
      elif [ "${APP_MODE}" = "gconf" ]
      then
        gconftool-2 --load "${BACKUP_DIR}/${APP_NAME}.xml"
      fi
      ;;

    *) 
      echo "Please use --backup or --restore"
      ;;
   esac
done
